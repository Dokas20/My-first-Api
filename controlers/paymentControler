const stripe = require("stripe")(process.env.STRIPE_PRIVATE_KEY)
require('dotenv').config()
const jwt = require('jsonwebtoken')
const Prod= require('../models/prodModls')
const Car = require('../models/carModel')

exports.generatePaymentLink = async (req,res) => {


  try {
        
    const userId = req.id

    const car = await Car.find({ userId: userId })
    if(!car){
        return res.json({msg: "Usuário sem carrinho criado"})
    }
    const prodLength = car[0].products.length
    
    const line_items = []

    for(let a = 0 ; a< prodLength; a++){
      
      const id = car[0].products[a]._id
      const prod = await Prod.findOne({_id: id})
      
      
      const token = prod.priceInCents
       

      try {
        jwt.verify(token, process.env.SECRET, (err, price)=> {
          if(err) return res.status(403).json({msg: err})
          const name = prod.name
          const description = prod.description
          const priceInCents = price.price
          const quantity = car[0].products[a].quantity
    
          const line_item =     {
            price_data: {
              currency: 'eur',
              unit_amount : priceInCents ,
              product_data: {
                name: name,
                description: description
              },
            },
            quantity: quantity,
          }
          line_items.push(line_item)
          })    
    
        } catch (error) {
          res.status(400).json({msg: "Token inválido"})
        } 

        
    }
    const valid = []
    line_items.map((e)=> {
      const price = e.price_data.unit_amount
      if(price.length < 3 ||  price < 100){
        valid.push('no')
      }
    })
    if(valid.length === 0){
      const session = await stripe.checkout.sessions.create({
        line_items:  line_items,
      billing_address_collection: 'required',
      success_url: `http://localhost:3000/success.html`,
      cancel_url: `http://localhost:3000/cancel.html`,
      mode: 'payment'
    }) ;
    res.json(200, session.url )
  } else return res.json('invalid request')

} catch (error) {
    res.status(500).json({ message: error })
}

}


exports.checkoutSession =  async (req,res)=> {
  const session = await stripe.checkout.sessions.retrieve(req.query.id, {expand: ['line_items']})
  res.json(session)
}
