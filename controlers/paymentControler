const stripe = require("stripe")(process.env.STRIPE_PRIVATE_KEY)
require('dotenv').config()
const jwt = require('jsonwebtoken')
const Prod= require('../models/prodModls')

exports.validPriceInCentsTokens = async (req,res, next) => {
  const id = req.body.id
  const prod = await Prod.findOne({_id: id})

  const token = prod.priceInCents
  if(!token){
      return res.status(401).json({msg:"Acesso negado!"})
  }
  try {
      jwt.verify(token, process.env.SECRET, (err, price)=> {
          if(err) return res.status(403).json({msg: "expired Token"})
          req.price = price.price 
        next()
      })    

  } catch (error) {
      res.status(400).json({msg: "Token invÃ¡lido"})
  } 
}


exports.paymentPageGenerate = async (req, res) => {


const id = req.body.id
const prod = await Prod.findOne({_id: id})

const priceInCents = req.price
const name = prod.name
const description = prod.description
const quantity= req.body.quantity

const line_items =     {
  price_data: {
    currency: 'eur',
    unit_amount : priceInCents ,
    product_data: {
      name: name,
      description: description
    },
  },
  quantity: quantity,
}

   try{
    const session = await stripe.checkout.sessions.create({
      line_items: [
        line_items
      ],
      billing_address_collection: 'required',
      success_url: `http://localhost:3000/success.html`,
      cancel_url: `http://localhost:3000/cancel.html`,
      mode: 'payment'
    }) ;
    res.json(200, {msg: session.url })
  } catch (error) {
    res.json(500, { error })
  }
 
}